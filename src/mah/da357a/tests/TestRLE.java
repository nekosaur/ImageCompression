package mah.da357a.tests;

import mah.da357a.transforms.RunLengthEncode;

/**
 * NOTE! Make sure -ea JVM option is enabled
 *
 * @author Albert Kaaman
 */
public class TestRLE {

    public static void main(String[] args) {

        byte[] bytes = new byte[] { Byte.parseByte("0"), Byte.parseByte("0"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("1"), Byte.parseByte("-50"), Byte.parseByte("-50"), Byte.parseByte("-50") };

        byte[] rle = RunLengthEncode.apply(bytes);
        rle = RunLengthEncode.revert(rle);

        TestUtils.assertArrays(bytes, rle);

    }
}
